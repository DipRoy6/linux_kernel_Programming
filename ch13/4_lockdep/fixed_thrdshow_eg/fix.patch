--- ../buggy_thrdshow_eg/thrd_showall_buggy.c	2023-11-20 07:08:07.494635949 +0530
+++ thrd_showall_fixed.c	2023-11-20 07:51:28.323143939 +0530
@@ -13,14 +13,13 @@
  * Brief Description:
  * This kernel module is based upon our earlier kernel module from Ch 6:
  *  ch6/foreach/thrd_showall/thrd_showall.c. 
- * When, here, we refactor it to use the get_task_comm() routine to
- * retrieve the name of the thread, it's buggy!
+ * Earlier (in the buggy version), we refactored it to use the
+ * get_task_comm() routine to retrieve the name of the thread, it's buggy!
  * The bug turns out to be a recursive locking issue, *detected by lockdep*.
- * The idea here is to run it; note that the system could very possibly hang!
- * Then lookup the kernel log (which will include lockdep's output) to see what
- * exactly happened.
- * Of course, we assume this is run on a debug kernel that has lockdep enabled
- * (CONFIG_PROVE_LOCKING).
+ *
+ * So now let's fix it.
+ * Here, we fix the deadlock by first unlocking the relevant lock (struct
+ * task_struct alloc_lock), then calling get_task_comm() and then locking it.
  *
  * For details, please refer the book, Ch 13.
  */
@@ -35,8 +34,8 @@
 #endif
 
 MODULE_AUTHOR("Kaiwan N Billimoria");
-MODULE_DESCRIPTION("LKP 2E book: ch13/4_lockdep/buggy_thrdshow_eg/:"
-" BUGGY demo to display all threads by iterating over the task list");
+MODULE_DESCRIPTION("LKP 2E book: ch13/4_lockdep/fixed_thrdshow_eg/:"
+" FIX to the earlier buggy demo to display all threads by iterating over the task list");
 MODULE_LICENSE("Dual MIT/GPL");
 MODULE_VERSION("0.2");
 
@@ -67,7 +66,7 @@
 #endif
 	do_each_thread(g, t) {     /* 'g' : process ptr; 't': thread ptr */
 		get_task_struct(t);	/* take a reference to the task struct */
-		task_lock(t);
+		task_lock(t);  /*** task lock taken here! ***/
 
 		snprintf(buf, BUFMAX-1, "%6d %6d ", g->tgid, t->pid);
 		/* task_struct addr and kernel-mode stack addr */
@@ -76,8 +75,17 @@
 		snprintf(tmp, TMPMAX-1, "  0x%px", t->stack);
 		strncat(buf, tmp, TMPMAX);
 
-		get_task_comm(tasknm, t);
-/*--- LOCKDEP catches a deadlock here !! ---*/
+        /* In the 'buggy' ver of this code, LOCKDEP did catch a deadlock here !!
+         * (at the point that get_task_comm() was invoked).
+         * The reason's clear: get_task_comm() attempts to take the very same lock
+         * that we just took above via task_lock(t);  !! This is obvious self-deadlock...
+         * So, we fix it here by first unlocking it, calling get_task_comm(), and
+         * then re-locking it.
+         */
+                task_unlock(t);
+                get_task_comm(tasknm, t);
+                task_lock(t);
+
 		if (!g->mm)	// kernel thread
 			snprintf(tmp, sizeof(tasknm)+3, " [%16s]", tasknm);
 		else
