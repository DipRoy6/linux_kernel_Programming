#!/bin/bash
# Explore a bit into the system's Cgroups v2 hierarchy
# This script's written looking at the official kernel doc on Cgroups v2:
# https://docs.kernel.org/admin-guide/cgroup-v2.html
# Please refer to it!
#
# Part of the code for
#  Linux Kernel Programming, 2 Ed, Kaiwan NB, Packt
#  Ch 11, The CPU Scheduler - Part 2

# Turn on unofficial Bash 'strict mode'! V useful
# "Convert many kinds of hidden, intermittent, or subtle bugs into immediate, glaringly obvious errors"
# ref: http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail

function die
{
echo >&2 "$@"
exit 1
}

# runcmd
# Parameters
#   $1 ... : params are the command to run
runcmd()
{
[ $# -eq 0 ] && return
echo "> $@"
eval "$@"
}

LINE="---------------------------------------------------------"
title()
{
echo "${LINE}
$*
${LINE}"
}

# Params:
#  $1 : path to cg
show_cg_dtl()
{
  local cg=$1

  printf "  %-45s : " $cg

  #--- Core interface files
  # Is it populated?
  # core interface file: cgroup.events
  local pop=$(grep "populated" ${cg}/cgroup.events |awk '{print $2}')
  if [[ ${pop} -ne 0 ]] ; then
     echo "populated"
  else
     echo "unpopulated"
     set +e
     return -1
  fi

  set -e
  # A CG can also be 'frozen' via this interface file (cgroup.events)
  # Or by writing 1 to cgroup.freeze

  # Any sub-controllers?
  # core interface file: cgroup.subtree_control
  # From https://docs.kernel.org/admin-guide/cgroup-v2.html
  # "Top-down Constraint
  # Resources are distributed top-down and a cgroup can further distribute a resource only if the resource has been distributed to it from the parent. This means that all non-root "cgroup.subtree_control" files can only contain controllers which are enabled in the parent's "cgroup.subtree_control" file. A controller can be enabled only if the parent has the controller enabled and a controller can't be disabled if one or more children have it enabled."
  ctrls=$(cat ${cg}/cgroup.subtree_control)
  printf "    %-41s   : " "(Sub)Controllers"
  [[ ! -z "${ctrls}" ]] && echo "${ctrls}" || echo "-none-"
  # "... A controller name prefixed with '+' enables the controller and '-' disables. ..."

  # Show the type
  printf "    %-41s   : %s\n" "cg type" $(cat ${cg}/cgroup.type)

  # Show the process belonging to this cg
  printf "    %-41s   : " "process PIDs"
  procs="$(cat ${cg}/cgroup.procs | tr '\n' ' ')"
  [[ ! -z "${procs}" ]] && echo "${procs}" || echo "-"

  # Show the threads belonging to this cg
  printf "    %-41s   : " "thread PIDs"
  thrds="$(cat ${cg}/cgroup.threads | tr '\n' ' ')"
  [[ ! -z "${thrds}" ]] && echo "${thrds}" || echo "-"

  #--- CPU controller
  # "... WARNING: cgroup2 doesn't yet support control of realtime processes and the cpu controller can only be enabled when all RT processes are in the root cgroup. Be aware that system management software may already have placed RT processes into nonroot cgroups during the system boot process, and these processes may need to be moved to the root cgroup before the cpu controller can be enabled. ..."
  local cpu_weight=$(cat ${cg}/cpu.weight 2>/dev/null)
  [[ ! -z "${cpu_weight}" ]] && {
    printf "    %-41s\n" "CPU"
    printf "      %-41s   : %s\n" "cpu.weight" ${cpu_weight}
  }
  local cpu_weight_nice=$(cat ${cg}/cpu.weight.nice 2>/dev/null)
  [[ ! -z "${cpu_weight_nice}" ]] && printf "      %-41s   : %s\n" "cpu.weight.nice" ${cpu_weight_nice}
  local cpu_max=$(cat ${cg}/cpu.max 2>/dev/null)
  [[ ! -z "${cpu_max}" ]] && printf "      %-41s   : %s\n" "cpu.max" ${cpu_max}

  printf "    %-41s   : %s\n" "cg stat" "$(cat ${cg}/cgroup.stat | tr '\n' ' ')"

  return 0
}


  echo
  show_cg_dtl "${cg}"
  [[ $? -eq 0 ]] && echo
  let i=i+1
done

exit 0
