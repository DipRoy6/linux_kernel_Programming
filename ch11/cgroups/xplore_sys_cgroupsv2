#!/bin/bash
# Explore a bit into the system's Cgroups v2 hierarchy
#
# Part of the code for
#  Linux Kernel Programming, 2 Ed, Kaiwan NB, Packt
#  Ch 11, The CPU Scheduler - Part 2

function die
{
echo >&2 "$@"
exit 1
}

# runcmd
# Parameters
#   $1 ... : params are the command to run
runcmd()
{
[ $# -eq 0 ] && return
echo "> $@"
eval "$@"
}

LINE="---------------------------------------------------------"
title()
{
echo "${LINE}
$*
${LINE}"
}


#--- 'main'
CGROUP_MOUNT=/sys/fs/cgroup

title "All cgroupv2 files"
runcmd "ls ${CGROUP_MOUNT}"

title "All currently defined cgroups (includes /)"
runcmd "find ${CGROUP_MOUNT} -maxdepth 1 -type d|sort"

title "All cgroup controllers (enabled within kernel)"
runcmd "cat ${CGROUP_MOUNT}/cgroup.controllers"
title "All controllers being applied to immd children"
runcmd "cat ${CGROUP_MOUNT}/cgroup.subtree_control"

title "Cgroups:"
ALL_CGROUPS=$(find ${CGROUP_MOUNT} -maxdepth 1 -type d|sort)
i=0
for cg in ${ALL_CGROUPS}
do
  # skip first one, the root cgroup
  [[ $i -eq 0 ]] && {
    i=1
    continue
  }
  printf "%-45s : " $cg

  # Is it populated?
  pop=$(grep "populated" ${cg}/cgroup.events |awk '{print $2}')
  if [[ ${pop} -ne 0 ]] ; then
     echo "populated"
  else
     echo "unpopulated"
     continue
  fi

  # Any controllers?
  # "Top-down Constraint
  # Resources are distributed top-down and a cgroup can further distribute a resource only if the resource has been distributed to it from the parent. This means that all non-root "cgroup.subtree_control" files can only contain controllers which are enabled in the parent's "cgroup.subtree_control" file. A controller can be enabled only if the parent has the controller enabled and a controller can't be disabled if one or more children have it enabled."
  ctrls=$(cat ${cg}/cgroup.subtree_control)
  printf "  (Sub)Controllers: "
  [[ ! -z "${ctrls}" ]] && echo "${ctrls}" || echo "-none-"


  #cat ${cg}/cgroup.events
  echo
  let i=i+1
done

exit 0
